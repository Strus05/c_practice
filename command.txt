	Настройка параметров компиляции

gcc -Wall - компиляция с предупреждением
gcc -std=cXX - компиляция в стандарт сХХ (с99, с11 и т.д.)
gcc -std=cXX -pedantic - гарантированное следование стандарту сХХ (генерирует предупреждение при несоответствии)
gcc app.c -S - позволяет сгенерировать файл с ассемблерным кодом

	Структура программы на С

	Переменные

Для вывода числа на консоль используется спецификатор %d
Определение переменной:
int var1, var2, var3
Инициализация переменной (определение + присвоение):
int var1=1, var2=2, var3=3

	Тип данных

char - один символ. 1 байт. (-128...127). signed char то же
unsigned char - один символ. 1байт. (0...255)
short - целое число. 2 байта. (-32768...32767)
unsigned short - целое число. 2 байта. (0...65535)
int - целое число. 4 байта на 64-разрядных системах. (-2147483648...2147483647)
unsigned int - целое число. 4 байта. (0...4294967295)
long - на 64-разрядном Windows long занимает 4 байта, а на 64-разрядных Linux/MacOS - 8 байт.
unsigned long - положительные long
long long - целое число. 8 байт. (-9223372036854775807...9223372036854775807)
unsigned long long - целое число. 8 байт. ( 0...18 446 744 073 709 551 615)
float - вещественное число одинарной точности с плавающей точкой в диапазоне +/- 3.4E-38 до 3.4E+38. 4 байта
double - вещественное число двойной точности с плавающей точкой в диапазоне +/- 1.7E-308 до 1.7E+308. 8 байт
long double - представляет вещественное число двойной точности с плавающей точкой в диапазоне +/- 3.4E-4932 до 1.1E+4932. 10 байт
void - тип без значения

Определение чисел в различных системах (с чего начинаются числа):
0b - двоичная
0 - восьмеричная
0x - шестнадцатеричная

Вывод данных в printf:
int					%d		или	%i
unsigned int		%u
unsigned short		%hu
long				%ld
unsigned long		%lu
long long			%lld
unsigned long long	%llu
float				%f		или %F (для вывода в вверхнем регистре)
long double			%lf
char 				%c

Оператор typedef позволяет определить для определенного типа псевдоним.
typedef unsigned char BYTE;
sizeof() - возвращает размер памяти в байтах, которую занимает переменная

Консольный вывод. Функция printf

printf(строка_форматирования, список_аргументов)

\n: перевод на новую строку
\t: табуляция
\r: возврат каретки (курсора) в начало строки
\\: обратный слеш
\': одинарная кавычка
\": двойная кавычка

%s: для вывода строк
%e: для вывода экспоненциального представления чисел с плавающей точкой (float, double)
%E: для вывода экспоненциального представления чисел с плавающей точкой в верхнем регистре (float, double)
%g: для вывода чисел используется более короткий из форматов %e или %f
%G: для вывода чисел используется более короткий из форматов %E или %F
%o: для вывода восьмеричных чисел без знака
%x: для вывода шестнадцатеричных чисел
%X: для вывода шестнадцатеричных чисел в верхнем регистре
%%: для вывода знака процента

%4.2f - "4" - ширина поля, "2" - точность (2 цифры в дробной части)
printf("x = %4.2f \n", 71.8986);  // 71.90

Дополнительно можно использовать флаги, которые дополнительно позволяют управлять форматированием вывода:
-: указывает, что выравнивание будет идти от левого края (по умолчанию используется выравнивае справа).
+: если выводимое значение имеет знак (+ или -), то оно выводится. Без данного флага знак выводится только в случае отрицательного значения.
пробел: вставляет пробел на месте знака перед положительными числами
#: при использовании со спецификаторами "o", "x", "X" значение числа выводится с предшествующими символами 0, 0x или 0X.
При использовании со спецификаторами "f", "g", "G" десятичная точка будет выводиться, даже если в числе нет дробной части

Константы
В отличие от переменных значение констант устанавливается один раз при их объявлении.
const float PI = 3.14;

Арифметические операции

Операнды:
+
-
*
/ - если в операции участвуют два целых числа, результат деления будет округляться до целого числа
% - результат деления двух чисел по модулю
++x - Префиксный инкремент. Увеличивает значение переменной на единицу и полученное значение используется как значение выражения ++x
x++ - Постфиксный инкремент. Увеличивает значение переменной на единицу, но значением выражения x++ будет то, которое было до увеличения на единицу
--x - Префиксный декремент
x-- - Постфиксный декремент
Выражение c = a+++b читается как c = (a++) + b
